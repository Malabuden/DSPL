import org.junit.jupiter.api.Assertions;

class ExtrapolatorTest {

    @org.junit.jupiter.api.Test
    void extrapolate() {
        // Образец набора данных для экстраполяции
        double[][] d = {{1.2, 2.7}, {1.4, 3.1}};
        // Пример значения x
        double x = 3.1;
        System.out.println("Value of y at x = 2.1 : " + Extrapolator.linExtrapolate(d, x));
        Assertions.assertNotNull(d);
    }

    @org.junit.jupiter.api.Test
    void regressionCoefficientsTest1() {
        double[] x = {1, 2, 3, 4, 5, 6};
        double[] y = {4, 6, 8, 9, 10, 11};

        double[] yExtrapolation = new double[x.length];
        double[] coefficients = Extrapolator.regressionsCoefficientsPowerFunction(x, y);
        for (double coefficient : coefficients) {
            System.out.println(coefficient);
        }

        System.out.println("Восстановленная кривая");
        for (int i = 0; i < x.length; i++) {
            yExtrapolation[i] = coefficients[0] * Math.pow(x[i], coefficients[1]);
            System.out.println(yExtrapolation[i]);
        }
    }

    @org.junit.jupiter.api.Test
    void regressionCoefficientsTest2() {
        double[] x = {1, 2, 3, 4, 5, 6};
        double[] y = {4, 6, 8, 9, 10, 11};

        double[] yExtrapolation = new double[x.length];
        double[] coefficients = Extrapolator.regressionsCoefficientsIndicativeFunction(x, y);
        for (double coefficient : coefficients) {
            System.out.println(coefficient);
        }

        System.out.println("Восстановленная кривая");
        for (int i = 0; i < x.length; i++) {
            yExtrapolation[i] = coefficients[0] * Math.pow(coefficients[1], x[i]);
            System.out.println(yExtrapolation[i]);
        }
    }

    @org.junit.jupiter.api.Test
    void regressionCoefficientsTest3() {
        double[] x = {1, 2, 3, 4, 5, 6};
        double[] y = {4, 6, 8, 9, 10, 11};

        double[] yExtrapolation = new double[x.length];
        double[] coefficients = Extrapolator.regressionsCoefficientsRationalFunction(x, y);
        for (double coefficient : coefficients) {
            System.out.println(coefficient);
        }

        System.out.println("Восстановленная кривая");
        for (int i = 0; i < x.length; i++) {
            yExtrapolation[i] = 1 / (coefficients[0] + coefficients[1] * x[i]);
            System.out.println(yExtrapolation[i]);
        }
    }

    @org.junit.jupiter.api.Test
    void regressionCoefficientsTest4() {
        double[] x = {1, 2, 3, 4, 5, 6};
        double[] y = {4, 6, 8, 9, 10, 11};

        double[] yExtrapolation = new double[x.length];
        double[] coefficients = Extrapolator.regressionsCoefficientsLogFunction(x, y);
        for (double coefficient : coefficients) {
            System.out.println(coefficient);
        }

        System.out.println("Восстановленная кривая");
        for (int i = 0; i < x.length; i++) {
            yExtrapolation[i] = coefficients[0] + coefficients[1] * Math.log10(x[i]);
            System.out.println(yExtrapolation[i]);
        }
    }

    @org.junit.jupiter.api.Test
    void regressionCoefficientsTestTr1() {
        double[] x = {68, 81, 83, 84, 85, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 100.469, 101,
                102, 103, 104, 105, 106, 107, 107.469, 108, 108.869, 109, 109.969, 109.994, 110, 110.069, 110.169, 110.369,
                111, 112, 112.469, 113, 114, 115, 116, 116.969, 117, 117.089, 117.769, 117.969, 118, 119, 120, 121, 122,
                123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147
                , 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
                169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184
        };

        double[] y = { 13040, 16077, 29236, 31782, 33112, 34481,
                34481, 35890, 37339, 38829, 40360, 41934, 43550, 45211, 46916, 48666, 50462, 52306, 54198, 56138
                , 58129, 60171, 61147, 62264, 64411, 66612, 68868, 71182, 73555, 75989, 77153, 78486, 80709, 81047
                , 83593, 83659, 83674, 83859, 84125, 84391, 84656, 86334, 88995, 90244, 91658, 94322, 96988, 99656
                , 102244, 102326, 102565, 104381, 104916, 104997, 107677, 110372, 113082, 115807, 118546, 121301, 124071
                , 126856, 129655, 132468, 135296, 138138, 140993, 143861, 146743, 149639, 152548, 155471, 158407
                , 161358, 164323, 167302, 170296, 173304, 176328, 179366, 182419, 185488, 188572, 191672, 194787
                , 197918, 201066, 204230, 207410, 210607, 213821, 217052, 220299, 223565, 226847, 230148, 233466
                , 236802, 240157, 243530, 246922, 250332, 253762, 257211, 260679, 264166, 267674, 271201, 274749
                , 278317, 281906, 285516, 289146, 292798, 296472, 300167, 303884, 307623, 311385, 315169
        };

        double[] yExtrapolation = new double[x.length];
        double[] coefficients = Extrapolator.regressionsCoefficientsPowerFunction(x, y);
        for (double coefficient : coefficients) {
            System.out.println(coefficient);
        }

        System.out.println("Восстановленная кривая");
        for (int i = 0; i < x.length; i++) {
            yExtrapolation[i] = coefficients[0] * Math.pow(x[i], coefficients[1]);
            System.out.println(yExtrapolation[i]);
        }
    }

    @org.junit.jupiter.api.Test
    void regressionCoefficientsTestTr2() {
        double[] x = {68, 81, 83, 84, 85, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 100.469, 101,
                102, 103, 104, 105, 106, 107, 107.469, 108, 108.869, 109, 109.969, 109.994, 110, 110.069, 110.169, 110.369,
                111, 112, 112.469, 113, 114, 115, 116, 116.969, 117, 117.089, 117.769, 117.969, 118, 119, 120, 121, 122,
                123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147
                , 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
                169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184
        };

        double[] y = { 13040, 16077, 29236, 31782, 33112, 34481,
                34481, 35890, 37339, 38829, 40360, 41934, 43550, 45211, 46916, 48666, 50462, 52306, 54198, 56138
                , 58129, 60171, 61147, 62264, 64411, 66612, 68868, 71182, 73555, 75989, 77153, 78486, 80709, 81047
                , 83593, 83659, 83674, 83859, 84125, 84391, 84656, 86334, 88995, 90244, 91658, 94322, 96988, 99656
                , 102244, 102326, 102565, 104381, 104916, 104997, 107677, 110372, 113082, 115807, 118546, 121301, 124071
                , 126856, 129655, 132468, 135296, 138138, 140993, 143861, 146743, 149639, 152548, 155471, 158407
                , 161358, 164323, 167302, 170296, 173304, 176328, 179366, 182419, 185488, 188572, 191672, 194787
                , 197918, 201066, 204230, 207410, 210607, 213821, 217052, 220299, 223565, 226847, 230148, 233466
                , 236802, 240157, 243530, 246922, 250332, 253762, 257211, 260679, 264166, 267674, 271201, 274749
                , 278317, 281906, 285516, 289146, 292798, 296472, 300167, 303884, 307623, 311385, 315169
        };

        double[] yExtrapolation = new double[x.length];
        double[] coefficients = Extrapolator.regressionsCoefficientsIndicativeFunction(x, y);
        for (double coefficient : coefficients) {
            System.out.println(coefficient);
        }

        System.out.println("Восстановленная кривая");
        for (int i = 0; i < x.length; i++) {
            yExtrapolation[i] = coefficients[0] * Math.pow(coefficients[1], x[i]);
            System.out.println(yExtrapolation[i]);
        }
    }

    @org.junit.jupiter.api.Test
    void regressionCoefficientsTestTr3() {
        double[] x = {68, 81, 83, 84, 85, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 100.469, 101,
                102, 103, 104, 105, 106, 107, 107.469, 108, 108.869, 109, 109.969, 109.994, 110, 110.069, 110.169, 110.369,
                111, 112, 112.469, 113, 114, 115, 116, 116.969, 117, 117.089, 117.769, 117.969, 118, 119, 120, 121, 122,
                123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147
                , 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
                169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184
        };

        double[] y = { 13040, 16077, 29236, 31782, 33112, 34481,
                34481, 35890, 37339, 38829, 40360, 41934, 43550, 45211, 46916, 48666, 50462, 52306, 54198, 56138
                , 58129, 60171, 61147, 62264, 64411, 66612, 68868, 71182, 73555, 75989, 77153, 78486, 80709, 81047
                , 83593, 83659, 83674, 83859, 84125, 84391, 84656, 86334, 88995, 90244, 91658, 94322, 96988, 99656
                , 102244, 102326, 102565, 104381, 104916, 104997, 107677, 110372, 113082, 115807, 118546, 121301, 124071
                , 126856, 129655, 132468, 135296, 138138, 140993, 143861, 146743, 149639, 152548, 155471, 158407
                , 161358, 164323, 167302, 170296, 173304, 176328, 179366, 182419, 185488, 188572, 191672, 194787
                , 197918, 201066, 204230, 207410, 210607, 213821, 217052, 220299, 223565, 226847, 230148, 233466
                , 236802, 240157, 243530, 246922, 250332, 253762, 257211, 260679, 264166, 267674, 271201, 274749
                , 278317, 281906, 285516, 289146, 292798, 296472, 300167, 303884, 307623, 311385, 315169
        };

        double[] yExtrapolation = new double[x.length];
        double[] coefficients = Extrapolator.regressionsCoefficientsRationalFunction(x, y);
        for (double coefficient : coefficients) {
            System.out.println(coefficient);
        }

        System.out.println("Восстановленная кривая");
        for (int i = 0; i < x.length; i++) {
            yExtrapolation[i] = 1 / (coefficients[0] + coefficients[1] * x[i]);
            System.out.println(yExtrapolation[i]);
        }
    }

    @org.junit.jupiter.api.Test
    void regressionCoefficientsTestTr4() {
        double[] x = {68, 81, 83, 84, 85, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 100.469, 101,
                102, 103, 104, 105, 106, 107, 107.469, 108, 108.869, 109, 109.969, 109.994, 110, 110.069, 110.169, 110.369,
                111, 112, 112.469, 113, 114, 115, 116, 116.969, 117, 117.089, 117.769, 117.969, 118, 119, 120, 121, 122,
                123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147
                , 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
                169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184
        };

        double[] y = { 13040, 16077, 29236, 31782, 33112, 34481,
                34481, 35890, 37339, 38829, 40360, 41934, 43550, 45211, 46916, 48666, 50462, 52306, 54198, 56138
                , 58129, 60171, 61147, 62264, 64411, 66612, 68868, 71182, 73555, 75989, 77153, 78486, 80709, 81047
                , 83593, 83659, 83674, 83859, 84125, 84391, 84656, 86334, 88995, 90244, 91658, 94322, 96988, 99656
                , 102244, 102326, 102565, 104381, 104916, 104997, 107677, 110372, 113082, 115807, 118546, 121301, 124071
                , 126856, 129655, 132468, 135296, 138138, 140993, 143861, 146743, 149639, 152548, 155471, 158407
                , 161358, 164323, 167302, 170296, 173304, 176328, 179366, 182419, 185488, 188572, 191672, 194787
                , 197918, 201066, 204230, 207410, 210607, 213821, 217052, 220299, 223565, 226847, 230148, 233466
                , 236802, 240157, 243530, 246922, 250332, 253762, 257211, 260679, 264166, 267674, 271201, 274749
                , 278317, 281906, 285516, 289146, 292798, 296472, 300167, 303884, 307623, 311385, 315169
        };

        double[] yExtrapolation = new double[x.length];
        double[] coefficients = Extrapolator.regressionsCoefficientsLogFunction(x, y);
        for (double coefficient : coefficients) {
            System.out.println(coefficient);
        }

        System.out.println("Восстановленная кривая");
        for (int i = 0; i < x.length; i++) {
            yExtrapolation[i] = coefficients[0] + coefficients[1] * Math.log10(x[i]);
            System.out.println(yExtrapolation[i]);
        }
    }

    @org.junit.jupiter.api.Test
    void regressionCoefficientsTestTr5() {
        double[] x = {68, 81, 83, 84, 85, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 100.469, 101,
                102, 103, 104, 105, 106, 107, 107.469, 108, 108.869, 109, 109.969, 109.994, 110, 110.069, 110.169, 110.369,
                111, 112, 112.469, 113, 114, 115, 116, 116.969, 117, 117.089, 117.769, 117.969, 118, 119, 120, 121, 122,
                123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147
                , 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
                169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184
        };

        double[] y = { 13040, 16077, 29236, 31782, 33112, 34481,
                34481, 35890, 37339, 38829, 40360, 41934, 43550, 45211, 46916, 48666, 50462, 52306, 54198, 56138
                , 58129, 60171, 61147, 62264, 64411, 66612, 68868, 71182, 73555, 75989, 77153, 78486, 80709, 81047
                , 83593, 83659, 83674, 83859, 84125, 84391, 84656, 86334, 88995, 90244, 91658, 94322, 96988, 99656
                , 102244, 102326, 102565, 104381, 104916, 104997, 107677, 110372, 113082, 115807, 118546, 121301, 124071
                , 126856, 129655, 132468, 135296, 138138, 140993, 143861, 146743, 149639, 152548, 155471, 158407
                , 161358, 164323, 167302, 170296, 173304, 176328, 179366, 182419, 185488, 188572, 191672, 194787
                , 197918, 201066, 204230, 207410, 210607, 213821, 217052, 220299, 223565, 226847, 230148, 233466
                , 236802, 240157, 243530, 246922, 250332, 253762, 257211, 260679, 264166, 267674, 271201, 274749
                , 278317, 281906, 285516, 289146, 292798, 296472, 300167, 303884, 307623, 311385, 315169
        };

        double[] yExtrapolation = new double[x.length];
        double[] coefficients = Extrapolator.regressionsCoefficientsGiperbolikFunction(x, y);
        for (double coefficient : coefficients) {
            System.out.println(coefficient);
        }

        System.out.println("Восстановленная кривая");
        for (int i = 0; i < x.length; i++) {
            yExtrapolation[i] = coefficients[0]+(coefficients[1]/x[i]);
            System.out.println(yExtrapolation[i]);
        }
    }

    @org.junit.jupiter.api.Test
    void regressionCoefficientsTestTr6() {
        double[] x = {68, 81, 83, 84, 85, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 100.469, 101,
                102, 103, 104, 105, 106, 107, 107.469, 108, 108.869, 109, 109.969, 109.994, 110, 110.069, 110.169, 110.369,
                111, 112, 112.469, 113, 114, 115, 116, 116.969, 117, 117.089, 117.769, 117.969, 118, 119, 120, 121, 122,
                123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147
                , 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
                169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184
        };

        double[] y = { 13040, 16077, 29236, 31782, 33112, 34481,
                34481, 35890, 37339, 38829, 40360, 41934, 43550, 45211, 46916, 48666, 50462, 52306, 54198, 56138
                , 58129, 60171, 61147, 62264, 64411, 66612, 68868, 71182, 73555, 75989, 77153, 78486, 80709, 81047
                , 83593, 83659, 83674, 83859, 84125, 84391, 84656, 86334, 88995, 90244, 91658, 94322, 96988, 99656
                , 102244, 102326, 102565, 104381, 104916, 104997, 107677, 110372, 113082, 115807, 118546, 121301, 124071
                , 126856, 129655, 132468, 135296, 138138, 140993, 143861, 146743, 149639, 152548, 155471, 158407
                , 161358, 164323, 167302, 170296, 173304, 176328, 179366, 182419, 185488, 188572, 191672, 194787
                , 197918, 201066, 204230, 207410, 210607, 213821, 217052, 220299, 223565, 226847, 230148, 233466
                , 236802, 240157, 243530, 246922, 250332, 253762, 257211, 260679, 264166, 267674, 271201, 274749
                , 278317, 281906, 285516, 289146, 292798, 296472, 300167, 303884, 307623, 311385, 315169
        };

        double[] yExtrapolation = new double[x.length];
        double[] coefficients = Extrapolator.regressionsCoefficientsTornkwistFunction(x, y);
        for (double coefficient : coefficients) {
            System.out.println(coefficient);
        }

        System.out.println("Восстановленная кривая");
        for (int i = 0; i < x.length; i++) {
            yExtrapolation[i] = (coefficients[0]*x[i])/(coefficients[1]+x[i]);
            System.out.println(yExtrapolation[i]);
        }
    }



    @org.junit.jupiter.api.Test
    void regressionFunctionTest() {
        double[] x = {1, 2, 3, 4, 5, 6, 8, 11};
        double[] y = {4, 6, 8, 9, 10, 11, 10, 12};
        double[] xExtrap = {12, 13, 14, 15, 16, 17};

        double[] regressionValues;
        regressionValues = Extrapolator.regressionFunction(x, y, xExtrap);
        for (int i = 0; i < xExtrap.length; i++) {
            System.out.println(regressionValues[i]);
        }
    }

}